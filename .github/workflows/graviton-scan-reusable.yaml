name: 'Deploy'
on:
  workflow_call:
    inputs:
      CLIENT_REPOSITORY: 
        default: 'aws/porting-advisor-for-graviton'
        type: string
      BRANCH: 
        default: 'main'
        type: string
    secrets:
      ac_github_token:
        required: true

      

env:
  SLACK_WEBHOOK_URL: 'https://hooks.slack.com/services/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'
  workspace: ${{ github.workspace }}
  OIDC: arn:aws:iam::817091419779:role/GHA_SCAN
  ac_github_token: ${{secrets.ac_github_token}}


jobs:
  clone-repo:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: none
      contents: read
    
    steps:
    - name: Checkout scripts
      uses: actions/checkout@v3.1.0 
      with:
        path: repo-to-scan
        repository: ${{inputs.CLIENT_REPOSITORY}}
        ref: ${{inputs.BRANCH}}
        token: ${{env.ac_github_token}}
        
  
    - name: Checkout AWS porting-advisor-for-graviton Repository
      uses: actions/checkout@v3.1.0 
      with:
        repository: aws/porting-advisor-for-graviton 
        path: porting-advisor

    - name: Setup Python environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.10' 
   
           
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
      working-directory: porting-advisor

    - name: Generate Report
      env:
        workspace: ${{ env.workspace }} 
      run: |
        
        repo='${{ inputs.CLIENT_REPOSITORY }}'
        scan_repo=$(echo $repo | cut -d/ -f2)
        repo_name=$(echo $repo | sed 's/\//-/g')
        cmd="python src/porting-advisor.py ../repo-to-scan --output ../repo-to-scan/report-${repo_name}.html"
        echo $cmd
        python3 ${workspace}/porting-advisor/src/porting-advisor.py ${workspace}/repo-to-scan --output ${workspace}/repo-to-scan/report-${repo_name}.html
        cat ../repo-to-scan/report-${repo_name}.html
        python3 ${workspace}/porting-advisor/src/porting-advisor.py ${workspace}/repo-to-scan > /${workspace}/repo-to-scan/report-${repo_name}.txt
      working-directory: porting-advisor

    - name: Set output path
      id: set_output_path
      run: |
        echo "::set-output name=report_html::${{ env.workspace }}/repo-to-scan/report-${repo_name}.html"



  update-repo:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:

    - name: Use generated HTML report
      run: |
        report_html=${{ needs.clone-repo.outputs.report_html }}
        
      needs:
        - clone-repo

    - name: Save report content to file
      run: |
        repo='${{ inputs.CLIENT_REPOSITORY }}'
        scan_repo=$(echo $repo | cut -d/ -f2)
        repo_name=$(echo $repo | sed 's/\//-/g')
        report_path=${{ env.workspace }}/report-${repo_name}.html
        cat $report_html > $report_path
      

    - name: 'configure AWS credentials'
      uses: aws-actions/configure-aws-credentials@v1-node16
      with:
        role-to-assume: ${{ env.OIDC }} 
        role-session-name: 'commit=${{ github.sha }}'
        role-duration-seconds: 1100
        aws-region:  us-east-1  

    - name: Set Environment Variable
      run: echo "REPO_NAME=$(echo $repo | sed 's/\//-/g')" >> $GITHUB_ENV
      env:
        repo: ${{ inputs.CLIENT_REPOSITORY }}

    - name: Upload Report to S3
      run: |
        repo='${{ inputs.CLIENT_REPOSITORY }}'
        scan_repo=$(echo $repo | cut -d/ -f2)
        repo_name=$(echo $repo | sed 's/\//-/g')
        report_path=${{ env.workspace }}/report-${repo_name}.html
        aws s3 cp $report_path s3://prod-scan-result/repositories/report-${repo_name}.html
        